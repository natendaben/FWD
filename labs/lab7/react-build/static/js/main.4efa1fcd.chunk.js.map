{"version":3,"sources":["Task.js","TaskList.js","App.js","serviceWorker.js","index.js"],"names":["Task","props","onDelete","bind","e","this","id","style","display","flexDirection","justifyContent","borderBottom","borderLeft","borderRight","padding","backgroundColor","name","onClick","Component","TaskList","state","tasks","textFieldValue","addTask","handleTextFieldChange","deleteItem","event","setState","target","value","preventDefault","itemToAdd","Date","now","newTaskList","filter","item","console","log","list","length","color","margin","alignItems","borderRadius","paddingBottom","maxWidth","border","marginRight","type","onChange","listStyle","width","borderTop","map","task","key","TotalDisplay","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4efa1fcd.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nexport default class Task extends Component{\n    constructor(props){\n        super(props);\n        this.onDelete = this.onDelete.bind(this);\n    }\n\n    onDelete(e){\n        this.props.onDelete(this.props.id);\n    }\n\n    render(){\n        var itemStyle = {\n            display: \"flex\",\n            flexDirection: \"row\",\n            justifyContent: \"space-between\",\n            borderBottom: \"2px solid #302D38\",\n            borderLeft: \"2px solid #302D38\",\n            borderRight: \"2px solid #302D38\",\n            padding: \"1%\",\n            backgroundColor: \"#BFEBFF\"\n        };\n        var deleteButtonStyle = {\n            backgroundColor: \"#FF6B6B\",\n            padding: \"0px 3px 0px 3px\",\n        };\n        return(\n            <li style={itemStyle}>\n                <span>{this.props.name}</span>\n                <span style={deleteButtonStyle} onClick={this.onDelete}>X</span>\n            </li>\n        );\n    }\n}","import React, {Component} from 'react';\nimport Task from './Task';\n\nexport default class TaskList extends Component{\n    constructor(props){\n        super(props);\n        this.state={\n            tasks: [],\n            textFieldValue: \"\"\n        }\n        this.addTask = this.addTask.bind(this);\n        this.handleTextFieldChange = this.handleTextFieldChange.bind(this);\n        this.deleteItem = this.deleteItem.bind(this);\n    }\n\n    handleTextFieldChange(event){\n        this.setState({textFieldValue: event.target.value});\n    }\n\n    addTask(event){\n        event.preventDefault();\n        var itemToAdd = { //create new item to add\n            name: this.state.textFieldValue,\n            id: Date.now() //this ensures each item will always have a unique id\n        };\n        this.setState({\n            textFieldValue: \"\",\n            tasks: [...this.state.tasks, itemToAdd]\n        });\n\n        /* Could also achieve this with following code (concat method): */\n        // var newTaskList = this.state.tasks.concat(itemToAdd);\n        // this.setState({\n        //     textFieldValue: '',\n        //     tasks: newTaskList,\n        // });\n    }\n\n    deleteItem(id){\n        var newTaskList = this.state.tasks.filter(item => item.id !== id);\n        this.setState({\n            tasks: newTaskList\n        });\n        console.log(\"Item with id \" + id + \" deleted!\");\n    }\n\n    TotalDisplay(props){\n        if (props.list.length === 0){\n            return <p>You don't have any tasks for today!</p>\n        } else if(props.list.length === 1){\n            return <p>You have {props.list.length} task to complete today.</p>\n        } else {\n            return <p>You have {props.list.length} tasks to complete today.</p>\n        }\n    }\n\n    render(){\n        var listStyle = {\n            backgroundColor: \"#6CD4FF\",\n            color: \"#302D38\",\n            margin: \"5%\",\n            padding:\"20px\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            borderRadius: \"10px\"\n        };\n        var h1style = {\n            margin: \"0px\",\n            paddingBottom: \"1%\"\n        };\n        var inputStyle = {\n            backgroundColor: \"#6CD4FF\",\n            color: \"#302D38\",\n            padding: \"5%\",\n            maxWidth: \"100%\",\n            border: \"2px solid #302D38\",\n            borderRadius: \"5px\",\n            marginRight: \"3%\"\n        };\n        var buttonStyle = {\n            backgroundColor: \"#FF6B6B\",\n            color: \"#302D38\",\n            border: \"2px solid #302D38\",\n            borderRadius: \"5px\"\n        };\n        var formStyle = {\n            display: \"flex\",\n            flexDirection: \"row\"\n        };\n        var ulStyle = {\n            listStyle: \"none\",\n            margin: \"3% 0% 0% 0%\",\n            padding: \"0px\",\n            width: \"60%\",\n            borderTop: \"2px solid #302D38\"\n        };\n\n        return(\n            <div style={listStyle}>\n                <h1 style={h1style}>React To-Do List</h1>\n                <div style={formStyle}>\n                    <input style={inputStyle} type=\"text\" value={this.state.textFieldValue} onChange={this.handleTextFieldChange}></input>\n                    <button style={buttonStyle} onClick={this.addTask}>Add</button>\n                </div>\n                <ul style={ulStyle}>{this.state.tasks.map(task => <Task key={task.id} id={task.id} name={task.name} onDelete={this.deleteItem}/>)}</ul>\n                <this.TotalDisplay list={this.state.tasks}/>\n            </div>\n        );\n    }\n}","import React, {Component} from 'react';\nimport './App.css';\nimport TaskList from './TaskList';\n\nexport default class App extends Component{\n  render(){\n    return(\n      <TaskList />\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}